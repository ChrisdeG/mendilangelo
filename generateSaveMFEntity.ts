import { domainmodels, microflows, datatypes, texts, IModel, expressions } from "mendixmodelsdk";
import { findOrCreateModuleAndFolder, MicroflowExists } from "./findOrCreateModuleAndFolder";

export function generateSaveMFEntity(model: IModel, domainModel: domainmodels.DomainModel, entityName: string, targetModule: string) {
    /*
     * JavaScript code generated by mendixmodelsdk.sdk.extras.JavaScriptSerializer
     */

    const folder = findOrCreateModuleAndFolder(model, domainModel.containerAsModule.name, targetModule, entityName);
    const entity = domainModel.entities.filter((entity: domainmodels.Entity) => entity.name === entityName)[0];

    let microflowName = `${entityName}_Save`;
    if (!MicroflowExists(model, targetModule, microflowName, folder)) {
        /*
         * JavaScript code generated by mendixmodelsdk.sdk.extras.JavaScriptSerializer
         */
        var startEvent1 = microflows.StartEvent.create(model);
        startEvent1.relativeMiddlePoint = { "x": -30, "y": 200 };
        startEvent1.size = { "width": 20, "height": 20 };

        var noExpression1 = expressions.NoExpression.create(model);

        var endEvent1 = microflows.EndEvent.create(model);
        endEvent1.relativeMiddlePoint = { "x": 810, "y": 200 };
        endEvent1.size = { "width": 20, "height": 20 };
        endEvent1.returnValueModel = noExpression1; // Note: for this property a default value is defined.

        var noExpression2 = expressions.NoExpression.create(model);

        var microflowCallParameterMapping1 = microflows.MicroflowCallParameterMapping.create(model);
        // Note: this is an unsupported internal property of the Model SDK which is subject to change.
        // https://forum.mendix.com/link/questions/87491
        (microflowCallParameterMapping1 as any)["__parameter"].updateWithRawValue(`${targetModule}.${entityName}_Validate.${entityName}`);
        //const pm2 = new microflows.MicroflowParameter(model, 'name', '132213213', false, microflowCallParameterMapping1.unit, microflowCallParameterMapping1);
        microflowCallParameterMapping1.argument = `\$${entityName}`;
        microflowCallParameterMapping1.argumentModel = noExpression2; // Note: for this property a default value is defined.

        var microflowCall1 = microflows.MicroflowCall.create(model);
        microflowCall1.microflow = model.findMicroflowByQualifiedName(`${targetModule}.${entityName}_Validate`);
        microflowCall1.parameterMappings.push(microflowCallParameterMapping1);

        var microflowCallAction1 = microflows.MicroflowCallAction.create(model);
        microflowCallAction1.microflowCall = microflowCall1; // Note: for this property a default value is defined.
        microflowCallAction1.useReturnVariable = true;
        microflowCallAction1.outputVariableName = "Valid";

        var actionActivity1 = microflows.ActionActivity.create(model);
        actionActivity1.relativeMiddlePoint = { "x": 130, "y": 200 };
        actionActivity1.size = { "width": 120, "height": 60 };
        actionActivity1.action = microflowCallAction1;
        actionActivity1.caption = "Activity";
        actionActivity1.autoGenerateCaption = true;

        var objectType1 = datatypes.ObjectType.create(model);
        objectType1.entity = entity;

        var mfparameter = microflows.MicroflowParameterObject.create(model);
        mfparameter.relativeMiddlePoint = { "x": -30, "y": 15 };
        mfparameter.size = { "width": 30, "height": 30 };
        mfparameter.name = entityName;
        mfparameter.variableType = objectType1; // Note: for this property a default value is defined.

        var noExpression3 = expressions.NoExpression.create(model);

        var expressionSplitCondition1 = microflows.ExpressionSplitCondition.create(model);
        expressionSplitCondition1.expression = "$Valid";
        expressionSplitCondition1.expressionModel = noExpression3; // Note: for this property a default value is defined.

        var exclusiveSplit1 = microflows.ExclusiveSplit.create(model);
        exclusiveSplit1.relativeMiddlePoint = { "x": 305, "y": 200 };
        exclusiveSplit1.size = { "width": 90, "height": 60 };
        exclusiveSplit1.splitCondition = expressionSplitCondition1; // Note: for this property a default value is defined.
        exclusiveSplit1.caption = "Valid";

        var commitAction1 = microflows.CommitAction.create(model);
        commitAction1.withEvents = true;
        commitAction1.commitVariableName = entityName;
        commitAction1.refreshInClient = true;

        var actionActivity2 = microflows.ActionActivity.create(model);
        actionActivity2.relativeMiddlePoint = { "x": 480, "y": 200 };
        actionActivity2.size = { "width": 120, "height": 60 };
        actionActivity2.action = commitAction1;
        actionActivity2.caption = "Activity";
        actionActivity2.autoGenerateCaption = true;

        var noExpression4 = expressions.NoExpression.create(model);

        var endEvent2 = microflows.EndEvent.create(model);
        endEvent2.relativeMiddlePoint = { "x": 305, "y": 340 };
        endEvent2.size = { "width": 20, "height": 20 };
        endEvent2.returnValueModel = noExpression4; // Note: for this property a default value is defined.

        var closeFormAction1 = microflows.CloseFormAction.create(model);

        var actionActivity3 = microflows.ActionActivity.create(model);
        actionActivity3.relativeMiddlePoint = { "x": 670, "y": 200 };
        actionActivity3.size = { "width": 120, "height": 60 };
        actionActivity3.action = closeFormAction1;
        actionActivity3.caption = "Activity";
        actionActivity3.autoGenerateCaption = true;

        var microflowObjectCollection1 = microflows.MicroflowObjectCollection.create(model);
        microflowObjectCollection1.objects.push(startEvent1);
        microflowObjectCollection1.objects.push(endEvent1);
        microflowObjectCollection1.objects.push(actionActivity1);
        microflowObjectCollection1.objects.push(mfparameter);
        microflowObjectCollection1.objects.push(exclusiveSplit1);
        microflowObjectCollection1.objects.push(actionActivity2);
        microflowObjectCollection1.objects.push(endEvent2);
        microflowObjectCollection1.objects.push(actionActivity3);

        var noCase1 = microflows.NoCase.create(model);

        var sequenceFlow1 = microflows.SequenceFlow.create(model);
        sequenceFlow1.originConnectionIndex = 1;
        sequenceFlow1.destinationConnectionIndex = 3;
        sequenceFlow1.originBezierVector = { "width": 0, "height": 0 };
        sequenceFlow1.destinationBezierVector = { "width": -30, "height": 0 };
        sequenceFlow1.caseValue = noCase1; // Note: for this property a default value is defined.

        var noCase2 = microflows.NoCase.create(model);

        var sequenceFlow2 = microflows.SequenceFlow.create(model);
        sequenceFlow2.originConnectionIndex = 1;
        sequenceFlow2.destinationConnectionIndex = 3;
        sequenceFlow2.originBezierVector = { "width": 30, "height": 0 };
        sequenceFlow2.destinationBezierVector = { "width": -15, "height": 0 };
        sequenceFlow2.caseValue = noCase2; // Note: for this property a default value is defined.

        var enumerationCase1 = microflows.EnumerationCase.create(model);
        enumerationCase1.value = "true";

        var sequenceFlow3 = microflows.SequenceFlow.create(model);
        sequenceFlow3.originConnectionIndex = 1;
        sequenceFlow3.destinationConnectionIndex = 3;
        sequenceFlow3.originBezierVector = { "width": 15, "height": 0 };
        sequenceFlow3.destinationBezierVector = { "width": -30, "height": 0 };
        sequenceFlow3.caseValue = enumerationCase1; // Note: for this property a default value is defined.

        var noCase3 = microflows.NoCase.create(model);

        var sequenceFlow4 = microflows.SequenceFlow.create(model);
        sequenceFlow4.originConnectionIndex = 1;
        sequenceFlow4.destinationConnectionIndex = 3;
        sequenceFlow4.originBezierVector = { "width": 30, "height": 0 };
        sequenceFlow4.destinationBezierVector = { "width": -30, "height": 0 };
        sequenceFlow4.caseValue = noCase3; // Note: for this property a default value is defined.

        var enumerationCase2 = microflows.EnumerationCase.create(model);
        enumerationCase2.value = "false";

        var sequenceFlow5 = microflows.SequenceFlow.create(model);
        sequenceFlow5.originConnectionIndex = 2;
        sequenceFlow5.originBezierVector = { "width": 0, "height": 15 };
        sequenceFlow5.destinationBezierVector = { "width": 0, "height": -15 };
        sequenceFlow5.caseValue = enumerationCase2; // Note: for this property a default value is defined.

        var noCase4 = microflows.NoCase.create(model);

        var sequenceFlow6 = microflows.SequenceFlow.create(model);
        sequenceFlow6.originConnectionIndex = 1;
        sequenceFlow6.destinationConnectionIndex = 3;
        sequenceFlow6.originBezierVector = { "width": 30, "height": 0 };
        sequenceFlow6.destinationBezierVector = { "width": -15, "height": 0 };
        sequenceFlow6.caseValue = noCase4; // Note: for this property a default value is defined.

        var voidType1 = datatypes.VoidType.create(model);

        var translation1 = texts.Translation.create(model);
        translation1.languageCode = "en_US";

        var text1 = texts.Text.create(model);
        text1.translations.push(translation1);

        var microflowSave = microflows.Microflow.createIn(folder);
        microflowSave.name = microflowName;
        microflowSave.objectCollection = microflowObjectCollection1; // Note: for this property a default value is defined.
        microflowSave.flows.push(sequenceFlow1);
        microflowSave.flows.push(sequenceFlow2);
        microflowSave.flows.push(sequenceFlow3);
        microflowSave.flows.push(sequenceFlow4);
        microflowSave.flows.push(sequenceFlow5);
        microflowSave.flows.push(sequenceFlow6);
        microflowSave.microflowReturnType = voidType1;
        microflowSave.allowConcurrentExecution = true;
        microflowSave.concurrencyErrorMessage = text1; // Note: for this property a default value is defined.

        sequenceFlow1.origin = startEvent1;
        sequenceFlow1.destination = actionActivity1;

        sequenceFlow2.origin = actionActivity1;
        sequenceFlow2.destination = exclusiveSplit1;

        sequenceFlow3.origin = exclusiveSplit1;
        sequenceFlow3.destination = actionActivity2;

        sequenceFlow4.origin = actionActivity2;
        sequenceFlow4.destination = actionActivity3;

        sequenceFlow5.origin = exclusiveSplit1;
        sequenceFlow5.destination = endEvent2;

        sequenceFlow6.origin = actionActivity3;
        sequenceFlow6.destination = endEvent1;

        let annotation = microflows.Annotation.createIn(microflowSave.objectCollection);
        annotation.caption = "This microflow was automatically generated by Mendilangelo. Don't use this here but copy or move it to your own module.";
        annotation.relativeMiddlePoint = { x: 100, y: 40 };
        annotation.size = { width: 200, height: 100 };
    }

}
